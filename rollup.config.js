import typescript from '@rollup/plugin-typescript';
import commonjs from '@rollup/plugin-commonjs';
import resolve from '@rollup/plugin-node-resolve';
import terser from '@rollup/plugin-terser';
import dts from 'rollup-plugin-dts';
import postcss from 'rollup-plugin-postcss';
import { readFileSync } from 'fs';
import { join } from 'path';
// import { visualizer } from 'rollup-plugin-visualizer'; // Optional: for bundle analysis

// Read package.json using readFileSync
const packageJson = JSON.parse(readFileSync(join(process.cwd(), 'package.json'), 'utf8'));

const isProduction = process.env.NODE_ENV === 'production';

export default [
  {
    input: 'src/index.ts',
    output: [
      {
        file: packageJson.main,
        format: 'cjs',
        sourcemap: !isProduction,
      },
      {
        file: packageJson.module,
        format: 'esm',
        sourcemap: !isProduction,
      },
    ],
    plugins: [
      resolve(),
      commonjs(),
      typescript({
        tsconfig: './tsconfig.json',
        exclude: ['**/example/**', '**/*.test.ts', '**/*.spec.ts'],
      }),
      postcss({ // Process CSS. For Tailwind, ensure it's set up to scan library components.
        config: {
          path: './postcss.config.js', // if you have one, or configure inline
        },
        extensions: ['.css'],
        minimize: isProduction,
        inject: {
           insertAt: 'top', // Injects CSS into <head>
        },
      }),
      isProduction && terser(),
      // visualizer({ open: true, filename: 'bundle-analysis.html' }), // Optional
    ].filter(Boolean),
    external: ['react', 'react-dom'], // Important: React should be a peer dependency
  },
  {
    input: 'dist/types/index.d.ts', // Entry point for .d.ts files generated by tsc via @rollup/plugin-typescript
    output: [{ file: packageJson.types, format: 'esm' }],
    plugins: [
        dts()
    ],
    external: [/\.css$/], // Don't include CSS in the .d.ts bundle
  },
];